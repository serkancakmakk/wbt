# Generated by Django 4.2.5 on 2023-10-02 09:09

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Certificates',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='certificates')),
                ('name', models.CharField(max_length=10)),
                ('document', models.ImageField(blank=True, null=True, upload_to='certificate_doc')),
            ],
        ),
        migrations.CreateModel(
            name='Company',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Vizion', models.CharField(max_length=1000)),
                ('Mission', models.CharField(max_length=1000)),
                ('Vizyon', models.CharField(max_length=1000)),
                ('Misyon', models.CharField(max_length=1000)),
                ('Telefon', models.IntegerField()),
                ('Email', models.EmailField(max_length=20)),
                ('Adres', models.CharField(max_length=30)),
                ('google_maps', models.CharField(max_length=500)),
                ('yeni_mesaj', models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='Gallery',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='gallery_images/')),
            ],
        ),
        migrations.CreateModel(
            name='Log',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hareket', models.CharField(max_length=255)),
                ('kullanici', models.CharField(blank=True, max_length=255, null=True)),
                ('tarih', models.DateTimeField(auto_now_add=True)),
                ('kullandigi_view', models.CharField(blank=True, max_length=255, null=True)),
                ('silindi', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mesaj', models.CharField(max_length=255)),
                ('konu', models.CharField(max_length=20)),
                ('email', models.EmailField(max_length=254)),
                ('telefon', models.IntegerField()),
                ('durum', models.CharField(choices=[('Okundu', 'Okundu'), ('Geçersiz', 'Geçersiz'), ('Beklemede', 'Beklemede'), ('Ulaşılamadı', 'Ulaşılamadı'), ('Okunmadı', 'Okunmadı'), ('Silindi', 'Silindi')], default='Okunmadı', max_length=11)),
            ],
        ),
        migrations.CreateModel(
            name='Services',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('servis_adi_tr', models.CharField(blank=True, max_length=20, null=True)),
                ('service_name_en', models.CharField(blank=True, max_length=20, null=True)),
                ('bilgi_tr', models.TextField(blank=True, max_length=255, null=True)),
                ('info_en', models.TextField(blank=True, max_length=255, null=True)),
                ('image', models.ImageField(blank=True, null=True, upload_to='')),
            ],
        ),
        migrations.CreateModel(
            name='wbtUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                ('yetkiler', models.ManyToManyField(to='auth.permission')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
